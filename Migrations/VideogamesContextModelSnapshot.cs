// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using net_ef_videogame.Database;

#nullable disable

namespace net_ef_videogame.Migrations
{
    [DbContext(typeof(VideogamesContext))]
    partial class VideogamesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AwardVideogame", b =>
                {
                    b.Property<int>("AwardsAwardId")
                        .HasColumnType("int");

                    b.Property<int>("VideogamesVideogameId")
                        .HasColumnType("int");

                    b.HasKey("AwardsAwardId", "VideogamesVideogameId");

                    b.HasIndex("VideogamesVideogameId");

                    b.ToTable("AwardVideogame");
                });

            modelBuilder.Entity("CategoryVideogame", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VideogamesVideogameId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "VideogamesVideogameId");

                    b.HasIndex("VideogamesVideogameId");

                    b.ToTable("CategoryVideogame");
                });

            modelBuilder.Entity("DeviceVideogame", b =>
                {
                    b.Property<int>("DevicesDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("VideogamesVideogameId")
                        .HasColumnType("int");

                    b.HasKey("DevicesDeviceId", "VideogamesVideogameId");

                    b.HasIndex("VideogamesVideogameId");

                    b.ToTable("DeviceVideogame");
                });

            modelBuilder.Entity("Pegi_labelVideogame", b =>
                {
                    b.Property<int>("Pegi_labelsPegi_labelId")
                        .HasColumnType("int");

                    b.Property<int>("VideoGamesVideogameId")
                        .HasColumnType("int");

                    b.HasKey("Pegi_labelsPegi_labelId", "VideoGamesVideogameId");

                    b.HasIndex("VideoGamesVideogameId");

                    b.ToTable("Pegi_labelVideogame");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("PlayersPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsTournamentId")
                        .HasColumnType("int");

                    b.HasKey("PlayersPlayerId", "TournamentsTournamentId");

                    b.HasIndex("TournamentsTournamentId");

                    b.ToTable("PlayerTournament");
                });

            modelBuilder.Entity("TournamentVideogame", b =>
                {
                    b.Property<int>("TournamentsTournamentId")
                        .HasColumnType("int");

                    b.Property<int>("VideogamesVideogameId")
                        .HasColumnType("int");

                    b.HasKey("TournamentsTournamentId", "VideogamesVideogameId");

                    b.HasIndex("VideogamesVideogameId");

                    b.ToTable("TournamentVideogame");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AwardId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AwardId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Pegi_label", b =>
                {
                    b.Property<int>("Pegi_labelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pegi_labelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pegi_labelId");

                    b.ToTable("Pegi_labels");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("VideogameId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("VideogameId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Software_house", b =>
                {
                    b.Property<int>("Software_houseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Software_houseId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tax_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Software_houseId");

                    b.ToTable("Software_houses");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Videogame", b =>
                {
                    b.Property<int>("VideogameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideogameId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Release_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Software_houseId")
                        .HasColumnType("int");

                    b.HasKey("VideogameId");

                    b.HasIndex("Software_houseId");

                    b.ToTable("Videogames");
                });

            modelBuilder.Entity("AwardVideogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Award", null)
                        .WithMany()
                        .HasForeignKey("AwardsAwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Videogame", null)
                        .WithMany()
                        .HasForeignKey("VideogamesVideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryVideogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Videogame", null)
                        .WithMany()
                        .HasForeignKey("VideogamesVideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceVideogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Videogame", null)
                        .WithMany()
                        .HasForeignKey("VideogamesVideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pegi_labelVideogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Pegi_label", null)
                        .WithMany()
                        .HasForeignKey("Pegi_labelsPegi_labelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Videogame", null)
                        .WithMany()
                        .HasForeignKey("VideoGamesVideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentVideogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_ef_videogame.Models.Videogame", null)
                        .WithMany()
                        .HasForeignKey("VideogamesVideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("net_ef_videogame.Models.Review", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Videogame", "Videogame")
                        .WithMany("Reviews")
                        .HasForeignKey("VideogameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Videogame");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Videogame", b =>
                {
                    b.HasOne("net_ef_videogame.Models.Software_house", "Software_house")
                        .WithMany("Videogames")
                        .HasForeignKey("Software_houseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software_house");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Software_house", b =>
                {
                    b.Navigation("Videogames");
                });

            modelBuilder.Entity("net_ef_videogame.Models.Videogame", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
